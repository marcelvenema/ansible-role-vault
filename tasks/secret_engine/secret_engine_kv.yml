---

#########################################################
## Hashicorp Vault KV Secret Engine module             ##
#########################################################

#########################################################
## Get KV Secrets engine                               ##
#########################################################

# Get Hashicorp Vault secret engine KV
- name: get_secret_engine action...
  when: action == 'get_secret_engine'
  block:

    # Declare vault_result variable if not defined
    - name: Register variable (vault_result)...
      ansible.builtin.set_fact:
        vault_result: ""
      when: vault_result is not defined

    # Validate local variables
    - name: Validate variables for Vault get_secret_engine action...
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        # name of the secret engine
        - secret_engine_name
        # name of variable to store the result
        - vault_result

    # Get Hashicorp Vault secret engines via API. Authenticate with vault_token.
    - name: Get Hashicorp Vault secret engines...
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/mounts"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
      register: secret_engines_result
      run_once: true
      no_log: true

    # Find all secret engines with name secret_engine_name. use regex_findall to find all matches. Store result in variable defined in vault_result.
    - name: "Get all Vault secret engines with name '{{ secret_engine_name }}'..."
      ansible.builtin.set_fact:
        "{{ vault_result }}" : "{{ secret_engines_result.json.data | regex_findall(secret_engine_name) }}"
      no_log: true

  # Error handling when error occured.
  rescue:

    # Check if vault is sealed, code 503
    - name: Check if vault is sealed
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/health"
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
        status_code: 503
      register: vault_health_response

    # Show information message
    - name: "Information message"
      ansible.builtin.debug:
        msg: "Vault is sealed. Unseal vault before creating secret engine."
      when: vault_health_response.json.sealed == true

#########################################################
## Create KV Secrets engine                            ##
#########################################################

# Create Hashicorp Vault secret engine KV
- name: create_secret_engine action...
  when: action == 'create_secret_engine'
  block:

  # Validate variables
    - name: Validate variables for Vault create_secret_engine action...
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - secret_engine_name
        - secret_engine_description

    # Get Hashicorp Vault secret engines via API. Authenticate with vault_token.
    - name: Gather Hashicorp Vault secret engines...
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/mounts"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
      register: secret_engines_result
      run_once: true
      # no_log: true

    # Find all secret engines with name secret_engine_name. use regex_findall to find all matches. Store result in variable vault_result.
    - name: "Check if secret engine ({{ secret_engine_name }}) already present..."
      ansible.builtin.set_fact:
        vault_result: "{{ secret_engines_result.json.data | regex_findall(secret_engine_name) }}"

    # Show message if secret engine already exists
    - name: "Information message"
      ansible.builtin.debug:
        msg: "Secret engine ({{ secret_engine_name }}) already exists..."
      when: vault_result | length > 0

    # Create Hashicorp secrets engine via api. Authenticate with vault_token.
    - name: "Create Hashicorp secrets engine ({{ secret_engine_name }})..."
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/mounts/{{ secret_engine_name }}"
        method: POST
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
        status_code: 204
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          type: kv
          description: "{{ secret_engine_description }}"
          options:
            version: 2
      when: vault_result | length == 0

  # Error handling when error occured.  
  # Possible causes: IP-address unreachable, Vault sealed
  rescue:

    # Check if vault is sealed, code 503
    - name: Check if vault is sealed
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/health"
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
        status_code: 503
      register: vault_health_response

    # Show information message
    - name: "Information message"
      ansible.builtin.debug:
        msg: "Vault is sealed. Unseal vault before creating secret engine."
      when: vault_health_response.json.sealed == true

#########################################################
## Destroy KV Secrets engine                           ##
#########################################################

# Destroy Hashicorp Vault secret engine KV
- name: destroy_secret_engine action...
  when: action == 'destroy_secret_engine'
  block:

  # Validate local variables
    - name: Validate variables for Vault destroy_secret_engine action.
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - secret_engine_name

    # Destroy Hashicorp secrets engine via api. Authenticate with vault_token.
    - name: "Destroy Hashicorp secrets engine {{ secret_engine_name }}"
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/mounts/{{ secret_engine_name }}"
        method: DELETE
        status_code: 204
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
        headers:
          X-Vault-Token: "{{ vault_token }}"

  # Error handling when error occured.
  rescue:

    # Check if vault is sealed, code 503
    - name: Check if vault is sealed
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/health"
        validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
        status_code: 503
      register: vault_health_response

    # Show information message
    - name: "Information message"
      ansible.builtin.debug:
        msg: "Vault is sealed. Unseal vault before creating secret engine."
      when: vault_health_response.json.sealed == true

#########################################################
## Post-actions                                        ##
#########################################################

# Unset variables
- name: Unset variables...
  ansible.builtin.set_fact:
    vault_result: ""
