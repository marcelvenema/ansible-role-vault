---

#########################################################
## Hashicorp Vault Secrets module                      ##
#########################################################

# Validate variables for Hashicorp Vault secrets module.
- name: Validate variables for Hashicorp Vault secrets module...
  ansible.builtin.assert:
    that: "varitem is defined"
    fail_msg: "Required variable '{{ varitem }}' has not been provided."
    quiet: true
  loop_control:
    loop_var: varitem
  loop:
    - vault_address
    - vault_token

#########################################################
## Get Secret                                          ##
#########################################################

- name: get_secret action...
  when: action == "get_secret"
  block:

    # Register secret_result variable
    - name: Register variable (secret_result)...
      ansible.builtin.set_fact:
        secret_result: ""
      no_log: true
      when: secret_result is not defined

    # Clear variable secret_result, be sure it is not used from a previous run.
    - name: Clear variable...
      ansible.builtin.set_fact:
        secret_result: ""
      no_log: true

    # Validate local variables
    - name: Validate variables for Vault get_secret action...
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - vault_name
        - secret_name
        - secret_key
        - secret_result

    # Get secret via Vault API.
    - name: "Get secret from Vault ({{ secret_name }})..."
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ secret_name }}"
        validate_certs: "{{ vault_validate_certs | default(true) }}"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
      register: api_result

    # Get secret_key value from result and parse into variable from var_result
    - name: Parse secret_key results...
      ansible.builtin.set_fact:
        "{{ secret_result }}" : "{{ api_result.json.data.data[secret_key] }}"
      no_log: true

    # TODO error handling

#########################################################
## Create Secret                                       ##
#########################################################

- name: create_secret action...
  when: action == "create_secret"
  block:

    # Validate local variables
    - name: Validate variables for Vault create_secret action...
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - vault_name
        - secret_name

    # Create secret via API. Authenticate with vault_token.
    - name: "Create secret {{ secret_name }}..."
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ secret_name }}"
        validate_certs: "{{ vault_validate_certs | default(true) }}"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          data: "{{ secret_keyvalue }}"
      register: vault_secret
      #no_log: true

#########################################################
## Destroy Secret                                      ##
#########################################################

- name: Destroy Vault secret
  when: action == "destroy_secret"
  block:

    # Show information message
    - name: Information message
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Export Secrets                                      ##
#########################################################

- name: export_secrets action...
  when: action == "export_secrets"
  block:

    # Register var_result variable
    - name: Register variable (var_result)...
      ansible.builtin.set_fact:
        var_result: ""
      when: var_result is not defined

    # Clear variable var_result, be sure it is not used from a previous run.
    - name: Clear variable (var_result)...
      ansible.builtin.set_fact:
        var_result: ""
      no_log: true

    # Validate local variables
    - name: Validate required variables for Vault export_secrets action...
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - vault_name
        - secret_name
        - filename

    # Get secret via Vault API.
    - name: Retrieve secrets from Vault...
      uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ secret_name }}"
        validate_certs: "{{ vault_validate_certs | default(true) }}"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
        return_content: yes
        status_code: 200
      register: secret_result
      no_log: true

    # Parse secret_result
    - name: Parse secret results...
      ansible.builtin.set_fact:
        secret_export: '[{ "secret_name": "{{ secret_name }}", "secret_data": {{ secret_result.json.data.data }} }]'
      no_log: true

    # Parse secret_result JSON
    - name: Parse secret results...
      ansible.builtin.set_fact:
        secret_export:  '{ "secrets": {{ secret_export }}, "filename": "{{ filename }}", "timestamp": "{{ ansible_date_time.iso8601 }}", "user": "{{ ansible_user_id }}" }'

    # Write secret to file
    - name: Write secret to file
      ansible.builtin.copy:
        content: "{{ secret_export | to_nice_json }}"
        dest: "{{ filename }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: 0600

#########################################################
## Import Secrets                                      ##
#########################################################

- name: import_secrets action...
  when: action == "import_secrets"
  block:

  # Register var_result variable
    - name: Register variable (var_result)...
      ansible.builtin.set_fact:
        var_result: ""
      when: var_result is not defined

    # Clear variable var_result, be sure it is not used from a previous run.
    - name: Clear variable (var_result)...
      ansible.builtin.set_fact:
        var_result: ""
      no_log: true

    # Validate local variables
    - name: Validate variables for required Vault import_secrets action...
      ansible.builtin.assert:
        that: "varitem is defined"
        fail_msg: "Required variable '{{ varitem }}' has not been provided."
        quiet: true
      loop_control:
        loop_var: varitem
      loop:
        - vault_name
        - filename

    # Read secret from file
    - name: Read secrets from file...
      ansible.builtin.slurp:
        src: "{{ filename }}"
      register: secret_file_import
      no_log: true

    # Parse secrets
    - name: Parse secrets
      ansible.builtin.set_fact:
        secret_import: "{{ secret_file_import.content | b64decode }}"
      no_log: true

    # Debug secret_import
    - name: Debug secret_import
      ansible.builtin.debug:
        msg:
          - "{{ vault_address }}"
          - "{{ vault_name }}"
          - "{{ secret_import }}"

    # Check if vault_name exists, else create it via API.
    - name: Check if vault_name exists...
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/sys/mounts/{{ vault_name }}"
        validate_certs: "{{ vault_validate_certs | default(true) }}"
        method: GET
        headers:
          X-Vault-Token: "{{ vault_token }}"
      register: vault_mount

    # Create secret via API. Authenticate with vault_token.
    - name: "Import secret via API from file {{ filename }}..."
      ansible.builtin.uri:
        url: "{{ vault_address }}/v1/{{ vault_name }}/data/{{ item.secret_name }}"
        validate_certs: "{{ vault_validate_certs | default(true) }}"
        method: POST
        headers:
          X-Vault-Token: "{{ vault_token }}"
        body_format: json
        body:
          data: "{{ item.secret_data }}"
      register: vault_secret
      loop: "{{ secret_import.secrets }}"
      # no_log: true

#########################################################
## Post-actions                                        ##
#########################################################

# Unset variables
- name: Unset variables...
  ansible.builtin.set_fact:
    api_result: null
    vault_secret: null
    secret_result: null
    secret_export: null
    secret_import: null
    secret_file_import: null
    vault_mount: null

