---

#########################################################
## Hashicorp Vault Create Secret module                ##
#########################################################
# Create secret in Hashicorp Vault.
# First get secrets from secret engine / secret_name, then merge them with new secret_keyvalue.

# Validate variables for Hashicorp Vault create_secret module.
- name: Validate variables for Hashicorp Vault create_secret module...
  ansible.builtin.assert:
    that: "varitem is defined"
    fail_msg: "Required variable '{{ varitem }}' has not been provided."
    quiet: true
  loop_control:
    loop_var: varitem
  loop:
    - vault_address
    - vault_token
    - secret_engine_name
    - secret_name
    - secret_keyvalue

#########################################################
## Get old secret                                      ##
#########################################################

# Get old secret via vault get_secret action.
# Ignore error if secret does not exist.
- name: "Get secret from Vault ({{ secret_name }})..."
  ansible.builtin.uri:
    url: "{{ vault_address }}/v1/{{ secret_engine_name }}/data/{{ secret_name }}"
    validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_token }}"
  register: api_result
  ignore_errors: true
  no_log: true

# Set fact
- name: Set variable (secret_keyvalue)...
  ansible.builtin.set_fact:
    secret_keyvalue_old: "{{ api_result.json.data.data | default({}) }}"

# Merge old secret_keyvalue_old with new secret_keyvalue.
- name: Set fact (secret_keyvalue)...
  ansible.builtin.set_fact:
    secret_keyvalue_combined: "{{ secret_keyvalue_old | combine(secret_keyvalue, recursive=True) }}"

#########################################################
## Create Secret                                       ##
#########################################################

# Create secret via API. Authenticate with vault_token.
- name: "Create secret {{ secret_name }}..."
  ansible.builtin.uri:
    url: "{{ vault_address }}/v1/{{ secret_engine_name }}/data/{{ secret_name }}"
    validate_certs: "{{ vault_vars.application.validate_certs | default(true) }}"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      data: "{{ secret_keyvalue_combined }}"
  register: vault_secret
  no_log: true
