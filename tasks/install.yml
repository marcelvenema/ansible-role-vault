---

#########################################################
## Pre-installation                                    ##
#########################################################

# Validate variables
- name: Validate variables for action.
  ansible.builtin.assert:
    that: "{{ item }} is defined"
    fail_msg: "Required variable '{{ item }}' has not been provided."
    quiet: true
  with_items: 
    - repository_url

#########################################################
## Pre-installation platform check                     ##
#########################################################

# Gather installed packages
- name: Gather installed packages
  ansible.builtin.package_facts:
    manager: auto

# Bypass platform check if platform is defined
- name: Bypass platform check if platform is defined
  ansible.builtin.set_fact:
    platform_check: false
  when: platform is defined

# Override platform check if platform variable is defined.
- name: See on which platform it can be installed...
  ansible.builtin.set_fact:
    platform_check: true 
  when: platform is undefined 

# Set platform if podman is detected
- name: Set platform if podman is detected
  ansible.builtin.set_fact:
    platform: "podman"
    platform_check: false
  when:
    - '"podman" in ansible_facts.packages'
    - platform_check == true

# Set platform if kubernetes is detected
- name: Set platform if kubernetes is detected
  ansible.builtin.set_fact:
    platform: "kubernetes"
    platform_check: false
  when:
    - '"kubernetes" in ansible_facts.packages'
    - platform_check == true

# Set platform to host if no podman or no kubernetes is detected
- name: Set platform to host if no Podman or Kubernetes is detected
  ansible.builtin.set_fact:
    platform: "host"
  when: platform_check == true

# Clear variable
- name: Clear platform_check variable
  ansible.builtin.set_fact:
    platform_check: undefined 
  
#########################################################
## Pre-installation uninstall                          ##
#########################################################

# Set uninstall to false if not defined
- name: Set uninstall variable if set
  ansible.builtin.set_fact:
    uninstall: false
  when: uninstall is not defined

# Run uninstall if uninstall is set
- name: Run uninstall playbook if set
  ansible.builtin.include_tasks: uninstall.yml
  ignore_errors: true
  when: uninstall == true

#########################################################
## Pre-installation user/group                         ##
#########################################################

# Create Hashicorp Vault user group
- name: Create Hashicorp Vault user group
  ansible.builtin.group: 
    name: "vault"
  become: true

# Create Hashicorp Vault user
- name: Create Hashicorp Vault user
  ansible.builtin.user:
    name: "vault"
    group: "vault"
    system: true
    shell: "/bin/bash"
    comment: "Vault user"
    createhome: "yes"
    state: present

# Enable linger for Hashicorp Vault user
- name: Enable linger for Hashicorp Vault user
  ansible.builtin.command: "loginctl enable-linger vault"

# Create folder for ansible tmp files
- name: Create home folders for user
  ansible.builtin.file:
    path: /home/vault/.ansible/tmp
    state: directory
    owner: vault
    mode: 0700

#########################################################
## Pre-installation folders                            ##
#########################################################

# Create folders from first part of container_volumes
- name: Create data folders...
  ansible.builtin.file:
    path: "{{ item.split(':')[0] }}"
    state: directory
    owner: vault
    mode: "0766"
  with_items: "{{ container_volumes }}"

#########################################################
## Pre-installation configuration                      ##
#########################################################

# Create Hashicorp Vault configuration
- name: Create Hashicorp Vault configuration
  ansible.builtin.template:
    src: ./templates/vault.podman_config.hcl.j2
    dest: "{{ data_dir }}/config/vault.hcl"
    owner: vault

#########################################################
## Installation                                        ##
#########################################################

#########################################################
## Installation via podman                             ##
#########################################################

- name: Install Vault on podman
  when: platform == "podman"
  block:
  
    # Check if podman is detected
    - name: Check if podman is detected
      ansible.builtin.assert:
        that: '"podman" in ansible_facts.packages'
        fail_msg: "Podman is not installed. Please install Podman first. Cannot continue..."

    ##################################
    # Import container image         # 
    ##################################
    # Pull container image, if failed try to use local file
    # local file can be http, https, ftp or local file

    # If tag is not defined, set value to latest
    - name: Validate repository_tag, set default
      ansible.builtin.set_fact:
        repository_tag: "latest"
      when: repository_tag is not defined or repository_tag == "" or repository_tag == none

    # Show information
    - name: Show information
      ansible.builtin.debug:
        msg: "Get container image from registry. this may take a while..."

    # Pull image from repository to local image repository.
    - name: "Pull Vault container image from repository {{ repository_url}}:{{ repository_tag }}"
      containers.podman.podman_image:
        name: "{{ repository_url }}"
        tag: "{{ repository_tag }}"
      register: pull_result
      ignore_errors: true

    # If pull failed, try to use local file
    - name: Install local image file
      when: pull_result is failed
      block:

        # Show information message
        - name: Show information message
          ansible.builtin.debug:
            msg: "Cannot pull from container repository, trying to load from file..."

        # Delete local temp file
        - name: "Delete local file /tmp/{{ container_name }}"
          ansible.builtin.file:
            path: "/tmp/{{ container_name }}.tar"
            state: absent

        # Check if file exists on ansible host
        - name: Check if repository_url is a local container file
          ansible.builtin.stat:
            path: "{{ repository_url }}"
          register: repository_url_result
          delegate_to: localhost

       # Copy image file to destination if local file
        - name: Copy container image file to destination
          ansible.builtin.copy:
            src: "{{ repository_url }}"
            dest: "/tmp/{{ container_name }}.tar"
          when: 
            - repository_url_result.stat.exists == true

      # Download local file if http or https
        - name: "Download file from {{ repository_url }}"
          ansible.builtin.get_url:
            url: "{{ repository_url }}"
            dest: "/tmp/{{ container_name }}.tar"
          when: ("http" in repository_url) or ("ftp" in repository_url) # https is included
        
        # check if container file exists
        - name: "Check if /tmp/{{ container_name }}.tar exists..."
          ansible.builtin.stat:
            path: "/tmp/{{ container_name }}.tar"
          register: container_tar_result

        # Fail if image file not found
        - name: Fail if Vault container image file not found
          ansible.builtin.fail:
            msg: "Repository URL {{ repository_url }} not found. Container image file location not found. Cannot continue..."
          when: 
            - container_tar_result.stat.exists == false

        ##################################
        # Checksum image                 # 
        ##################################

        # If checksum contains :, split it in checksum and algorithm
        - name: Split checksum and algorithm
          ansible.builtin.set_fact:
            repository_checksum: "{{ repository_checksum.split(':')[1] }}"
            repository_checksum_algorithm: "{{ repository_checksum.split(':')[0] }}"
          when: repository_checksum is defined and ":" in repository_checksum

        # Get checksum of container file.tar
        - name: Get checksum of local container file
          ansible.builtin.stat:
            path: "/tmp/{{ container_name }}.tar"
            checksum_algorithm: "{{ repository_checksum_algorithm }}"
            get_checksum: yes
          register: checksum_result
          when : repository_checksum is defined 

        # Fail when checksum is not the same
        - name: Fail when checksum is not correct
          ansible.builtin.fail:
            msg: "Checksum of /tmp/{{ container_name }}.tar ({{ checksum_result.stat.checksum }}) is not the same as the provided checksum ({{ repository_checksum }}). Cannot continue..."
          when: 
            - repository_checksum is defined
            - checksum_result.stat.checksum != repository_checksum

        # Load image from file if pull failed
        - name: Import container image to podman
          ansible.builtin.command: "podman load -i /tmp/{{ container_name }}.tar"
          register: import_result

        # Cleanup image file
        - name: Cleanup container image file
          ansible.builtin.file:
            path: "/tmp/{{ container_name }}.tar"
            state: absent

    # Get image info from podman
    - name: Gather info on container image
      containers.podman.podman_image_info:
      register: images_info

    # Find image id
    - name: Parse image info, select container image id
      ansible.builtin.set_fact:
        image_id: "{{ images_info.images | selectattr('RepoTags', 'search', container_name) | map(attribute='Id') | first }}"

    ##################################
    # Create Vault container         #
    ##################################

    # Get uid of user Vault
    - name: Get uid of user Vault
      ansible.builtin.user:
        name: vault
      register: vault_user

    # Set fact vault_uid
    - name: Store uid of user Vault
      ansible.builtin.set_fact:
        vault_uid: "{{ vault_user.uid }}"  

    # Create Hashicorp Vault container
    - name: "Create Hashicorp Vault container with id {{ image_id }}..."
      containers.podman.podman_container:
        name: "{{ container_name}}"
        image: "{{ image_id }}"
        cap_add: IPC_LOCK
        security_opt: label=disable
        # privileged: true
        user: "{{ vault_uid }}"
        command: vault server -config=/vault/config/vault.hcl
        ports: "{{ container_ports }}"
        volumes: "{{ container_volumes }}"
        restart_policy: always
        env:
          SKIP_CHOWN: true
          SKIP_SETCAP: true

    # Wait for Hashicorp Vault to start
    - name: Wait for Hashicorp Vault container to start
      ansible.builtin.wait_for:
        host: localhost
        port: "{{ container_ports[0].split(':')[0] }}"
        delay: 5
        timeout: 60

    ##################################
    # Configure autostart container  #
    ##################################

    # Create folder for systemd unit file
    - name: Create folder for systemd unit file
      ansible.builtin.file:
        path: /home/vault/.config/systemd/user
        state: directory
        owner: vault
        mode: 0766

    # Stop Vault container
    - name: Stop Vault container
      containers.podman.podman_container:
        name: container
        image: "{{ image_id }}"
        state: absent
    
    # Prune containers
    - name: Prune everything
      containers.podman.podman_prune:
        volume: true

    # Auto-start Vault container on system boot
    - name: Generate systemd unit file for Vault container
      containers.podman.podman_generate_systemd:
        name: vault
        new: true
        no_header: true
        dest: /home/vault/.config/systemd/user

    # Set systemd unit file permissions
    - name: Set systemd unit file permissions
      ansible.builtin.file:
        path: /home/vault/.config/systemd/user/container-vault.service
        owner: vault
        mode: 0644

    # Reload systemd with shell. Use user vault
    - name: Reload systemd with shell. Use user vault
      ansible.builtin.shell: "systemctl --user daemon-reload"
      become: true
      become_user: vault
      environment:
        XDG_RUNTIME_DIR: "/run/user/{{ vault_uid }}"
    
    # Enable systemd service for Vault container
    #- name: Enable systemd service for Vault container
    #  ansible.builtin.shell: "systemctl --user enable --now container-vault.service"
    #  become: true
    #  become_user: vault
    #  environment:
    #    XDG_RUNTIME_DIR: "/run/user/{{ vault_uid }}"

#########################################################
## Installation on kubernetes                         ##
#########################################################

- name: Install Vault on Kubernetes
  when: platform == "kubernetes"
  block:

    # Debug message
    - name: Debug message
      ansible.builtin.debug:
        msg: "Install Hashicorp Vault on kubernetes"
  
    # Show information message
    - name: This part is not (yet) implemented.
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Installation on host                                ##
#########################################################

- name: Install Vault on host
  when: platform == "host"
  block:

    # Download Hashicorp Vault from url
    - name: "Download Hashicorp Vault from {{ repository_url }}"
      ansible.builtin.get_url:
        url: "{{ repository_url }}"
        dest: "/tmp/{{ container_name }}.zip"
        mode: 0755
        validate_certs: false
      register: repository_url_result 

    # Unzip Hashicorp Vault
    - name: "Unzip Hashicorp Vault"
      ansible.builtin.unarchive:
        src: "/tmp/{{ container_name }}.zip"
        dest: /usr/local/bin

    # Autostart Vault on system boot
    - name: Generate systemd unit file for Vault
      ansible.builtin.template:
        src: ./templates/vault.service.j2
        dest: /etc/systemd/system/vault.service
        owner: root
        mode: 0644

    # Show information message
    - name: This part is not (yet) implemented.
      ansible.builtin.debug:
        msg: "This part is not (yet) implemented."

    # Stop playbook
    - name: Stop playbook
      ansible.builtin.meta: end_play

#########################################################
## Configuration                                       ##
#########################################################

# Register vault_address
# TODO
- name: Register vault_address
  ansible.builtin.set_fact:
    vault_address: "http://localhost:{{ container_ports[0].split(':')[0] }}"

# Configure Hashicorp Vault
- name: Configure
  ansible.builtin.include_tasks: configure.yml

#########################################################
## Post-install                                        ##
#########################################################

# Unset variables
- name: Unset variables
  ansible.builtin.set_fact:
    action:
    repository_url:
    repository_tag:
    repository_checksum:
    repository_checksum_algorithm:
    container_name:
    container_ports:
    container_volumes:
    